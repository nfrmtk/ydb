#include <library/cpp/testing/unittest/registar.h>

#include <util/stream/format.h>

#include <junk/hor911/aggr/arun/aggr_rh_ht.h>

void TestInsert16(ui32 count, ui8 * values, ui8 * slots) {
    ui64 buffer[4 * 16];
    TRHHashTable ht(buffer, 4, 1, 4);

    for (ui32 i = 0; i < count; i++) {
        ui64 key = values[i];
        ui64 hash = key << (24 + 32);
        ht.Insert(hash, &key);
    }

    for (ui32 i = 0; i < 16; i++) {
        Cerr << Hex(buffer[i * 4 + 0]) << ", " << Hex(buffer[i * 4 + 1]) << ", " << buffer[i * 4 + 3] << Endl;
    }
    Cerr << Endl;

    for (ui32 i = 0; i < 16; i++) {
        auto * slot = ht.GetSlot(i);
        if (slot[3]) {
            UNIT_ASSERT_VALUES_EQUAL(slots[i], slot[1]);
        }
    }
}

Y_UNIT_TEST_SUITE(RobinHoodHT) {
    Y_UNIT_TEST(Simple) {
        ui8 values[] = {       0x10u,        0x30u,        0x50u,        0x70u,        0x90u,        0xB0u,        0xD0u,        0xF0u};
        ui8 slots[]  = {0xFFu, 0x10u, 0xFFu, 0x30u, 0xFFu, 0x50u, 0xFFu, 0x70u, 0xFFu, 0x90u, 0xFFu, 0xB0u, 0xFFu, 0xD0u, 0xFFu, 0xF0u};
        TestInsert16(8, values, slots);
    }
    Y_UNIT_TEST(Sorting) {
        ui8 values[] = {       0x10u, 0x13u, 0x12u, 0x11u };
        ui8 slots[]  = {0xFFu, 0x10u, 0x11u, 0x12u, 0x13u, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu};
        TestInsert16(4, values, slots);
    }
    Y_UNIT_TEST(Overflow1) {
        ui8 values[] = {       0xF0u, 0xF3u, 0xF2u, 0xF1u };
        ui8 slots[]  = {0xF1u, 0xF2u, 0xF3u, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xF0u};
        TestInsert16(4, values, slots);
    }
    Y_UNIT_TEST(Overflow2) {
        ui8 values[] = {0x10u, 0xF0u, 0xF3u, 0xF2u, 0xF1u };
        ui8 slots[]  = {0xF1u, 0xF2u, 0xF3u, 0x10u, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xF0u};
        TestInsert16(5, values, slots);
    }
    Y_UNIT_TEST(Overflow3) {
        ui8 values[] = {0x12u, 0xF0u, 0xF3u, 0xF2u, 0xF1u, 0x10u };
        ui8 slots[]  = {0xF1u, 0xF2u, 0xF3u, 0x10u, 0x12u, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xF0u};
        TestInsert16(6, values, slots);
    }
    Y_UNIT_TEST(Overflow4) {
        ui8 values[] = {0x12u, 0xF0u, 0xF3u, 0xF2u, 0xF1u, 0x10u, 0xE0u, 0xE1u };
        ui8 slots[]  = {0xF0u, 0xF1u, 0xF2u, 0xF3u, 0x10u, 0x12u, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xE0u, 0xE1u};
        TestInsert16(8, values, slots);
    }
}
